/*
 * JstpwPanel.java
 *
 * Created on 21 March 2007, 14:43
 */

package jstpw;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;

/**
 *
 * @author  ser
 */
public class JstpwPane extends javax.swing.JPanel {
    
    final TimeUpdater updater = new TimeUpdater();
    final javax.swing.Timer timer = new javax.swing.Timer(100, updater);
    final DefaultListModel history = new DefaultListModel();
    long timeOnStopwatch;
    long startTime;
    boolean stopped = true;
    boolean running = false;
    
    /** Creates new form JstpwPanel */
    public JstpwPane() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        timeEntry = new javax.swing.JTextField();
        startButton = new javax.swing.JToggleButton();
        stopButton = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        historyList = new javax.swing.JList(history);

        setLayout(new java.awt.GridBagLayout());

        timeEntry.setBackground(new java.awt.Color(255, 255, 255));
        timeEntry.setEditable(false);
        timeEntry.setFont(timeEntry.getFont().deriveFont(timeEntry.getFont().getStyle() | java.awt.Font.BOLD, timeEntry.getFont().getSize()+10));
        timeEntry.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeEntry.setText("00:00:00.0");
        timeEntry.setName("timeEntry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(timeEntry, gridBagConstraints);

        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jstpw/img/player_play.png")));
        startButton.setToolTipText("Start/Pause");
        startButton.setFocusPainted(false);
        startButton.setName("startButton");
        startButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/jstpw/img/player_pause.png")));
        startButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startButtonItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        add(startButton, gridBagConstraints);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jstpw/img/player_stop.png")));
        stopButton.setToolTipText("Reset counter and store in history list");
        stopButton.setFocusPainted(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        add(stopButton, gridBagConstraints);

        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        historyList.setFont(historyList.getFont().deriveFont(historyList.getFont().getStyle() & ~java.awt.Font.BOLD, historyList.getFont().getSize()+4));
        jScrollPane.setViewportView(historyList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (running) {
            startButton.doClick();
        }
        stopped = true;
    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startButtonItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED) {
            running = false;
            timer.stop();
            storeTimeInHistoryList();
        } else {
            running = true;
            if (stopped) {
                stopped = false;
                timeOnStopwatch = 0;
            }
            startTime = getCurrentTime();
            timer.start();
        }
    }//GEN-LAST:event_startButtonItemStateChanged
    
    private void storeTimeInHistoryList() {
        history.add(0, timeEntry.getText());
    }
    private long getCurrentTime() {
        return System.currentTimeMillis() / 100;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList historyList;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JToggleButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextField timeEntry;
    // End of variables declaration//GEN-END:variables
    
    class TimeUpdater implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            long currentTime = getCurrentTime();
            timeOnStopwatch += currentTime - startTime;
            startTime = currentTime;
            timeEntry.setText(formatText(timeOnStopwatch));
        }
        
        public String formatText(long time) {
            long h;
            long m;
            long s;
            long ss;
            
            ss = time % 10;
            s = time / 10;
            m = s / 60;
            s = s % 60;
            h = m / 60;
            m = m % 60;

            return String.format("%02d:%02d:%02d.%d", h, m, s, ss);
        }
    }
}
